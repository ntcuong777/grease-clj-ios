#!/bin/bash

set -x
set -e


env

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
cd "$DIR"

PROJECT_DIR="$DIR/.."

cd ..

clojure -X:depstar

mkdir -p library
pushd library

rm -rf ./tmp

$GRAALVM_HOME/bin/native-image \
    --report-unsupported-elements-at-runtime \
    --no-fallback \
    --no-server \
    -H:+ExitAfterRelocatableImageWrite \
    -H:+SharedLibrary \
    -H:+AddAllCharsets \
    -H:+ReportExceptionStackTraces \
    -H:-DeadlockWatchdogExitOnTimeout \
    -H:DeadlockWatchdogInterval=0 \
    -H:+RemoveSaturatedTypeFlows \
    -H:-SpawnIsolates \
    -H:PageSize=16384 \
    -Djdk.internal.lambda.eagerlyInitialize=false \
    -H:+ReportExceptionStackTraces \
    -H:TempDirectory="$PROJECT_DIR"/library/tmp \
    -H:ReflectionConfigurationFiles="${PROJECT_DIR}"/conf/reflectionconfig-arm64-ios.json \
    -H:JNIConfigurationFiles="${PROJECT_DIR}"/conf/jniconfig-arm64-ios.json \
    -H:ResourceConfigurationFiles="${PROJECT_DIR}"/conf/resourceconfig-arm64-ios.json \
    -J-Dclojure.spec.skip-macros=true \
    -J-Dclojure.compiler.direct-linking=true \
    -J-Dtech.v3.datatype.graal-native=true \
    -Dsvm.targetName=iOS \
    -Dsvm.targetArch=arm64 \
    -H:+UseCAPCache \
    -H:CAPCacheDir="${PROJECT_DIR}"/conf/capcache \
    -H:CompilerBackend=lir \
    '-Dsvm.platform=org.graalvm.nativeimage.Platform$IOS_AARCH64' \
    -jar ../target/grease-uber.jar


    # -J-Xmx20G \
    # -J-XX:MaxDirectMemorySize=8G \



rm -rf ./build/out
mkdir -p build/out

uname -m
find ./tmp
df -h
clang --version

find ./tmp -name 'bb.o' -exec cp {} build/out \;
# find ./tmp -name 'grease-uber.o' -exec cp {} build/out \;

ls -l ./build/out/bb.o
file ./build/out/bb.o
nm -gU ./build/out/bb.o

hexdump -C ./build/out/bb.o | head

popd

# This is where xcode will look for headers
ln -s "$GRAALVM_HOME" build/graalvm

